generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Seller {
  id                         Int                          @id @default(autoincrement())
  email                      String                       @unique
  name                       String?
  password                   String?
  goods                      Goods[]
  goodsCommonInfo            GoodsInfo[] // 상품공통정보
  loginHistory               LoginHistory[]
  sellerBusinessRegistration SellerBusinessRegistration[]
  sellerSettlementAccount    SellerSettlementAccount[]
  sellerShop                 SellerShop?
  sellerSettlements          SellerSettlements[]
  socialAccounts             SellerSocialAccount[]
  shippingGroups             ShippingGroup[]
}

// 마케터의 상정정보
model SellerShop {
  sellerEmail String @unique // 등록한 판매자 ID 
  shopName    String
  seller      Seller @relation(fields: [sellerEmail], references: [email], onDelete: Cascade)
}

// 사업자등록정보
model SellerBusinessRegistration {
  id                               Int                               @id @default(autoincrement()) // 사업자 등록증 DB 고유 번호
  sellerEmail                      String // 등록한 판매자 ID 
  companyName                      String // 상호명
  businessRegistrationNumber       String // 사업자등록증 등록번호
  representativeName               String // 대표자명
  businessType                     String // 업태
  businessItem                     String // 종목
  businessAddress                  String // 사업장 주소
  taxInvoiceMail                   String // 세금계산서 전용 이메일
  businessRegistrationImageName    String // 사업자등록증 이미지 파일명
  mailOrderSalesNumber             String // 통신판매업 신고번호 
  mailOrderSalesImageName          String // 통신판매업 이미지 파일명
  BusinessRegistrationConfirmation BusinessRegistrationConfirmation?
  seller                           Seller                            @relation(fields: [sellerEmail], references: [email], onDelete: Cascade)

  @@index(name: "BusinessRegistrationIndex", fields: [sellerEmail, id])
}

// 사업자등록정보 검수정보
model BusinessRegistrationConfirmation {
  id                           Int                        @id @default(autoincrement())
  status                       BusinessRegistrationStatus @default(waiting) // 검수 상태
  rejectionReason              String?                    @db.Text // 반려사유 - 관리자가 입력
  SellerBusinessRegistrationId Int                        @unique
  SellerBusinessRegistration   SellerBusinessRegistration @relation(fields: [SellerBusinessRegistrationId], references: [id])
}

// 정산 내역
model SellerSettlements {
  id          Int      @id @default(autoincrement()) // 정산 내역 고유 번호
  sellerEmail String // 등록한 판매자 ID 
  date        DateTime @default(now()) // 정산 시점
  state       Int      @default(0) @db.UnsignedTinyInt // 정산 상태
  amount      Int      @default(0)
  seller      Seller   @relation(fields: [sellerEmail], references: [email], onDelete: Cascade)

  @@index([sellerEmail, id], name: "SellerSettlementsIndex")
}

model SellerSettlementAccount {
  id                         Int    @id @default(autoincrement())
  sellerEmail                String
  bank                       String
  number                     String
  name                       String
  settlementAccountImageName String
  seller                     Seller @relation(fields: [sellerEmail], references: [email], onDelete: Cascade)

  @@index([sellerEmail, id], name: "SellerSettlementAccountIndex")
}

model MailVerificationCode {
  id               Int      @id @default(autoincrement())
  verificationCode String
  createDate       DateTime @default(now())
  email            String   @default("")
}

model SellerSocialAccount {
  serviceId    String   @id // 인증 결과로 해당 서비스에서 받은 고유 식별자
  provider     String // 'google' | 'kakao' | 'naver'
  name         String
  registDate   DateTime @default(now())
  profileImage String?
  accessToken  String?
  refreshToken String?
  sellerId     Int
  seller       Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([sellerId], name: "sellerId")
}

// ****************************
// * firstmall과 동일한 상품 정보 (컬럼명도 동일하게 가져갑니다.)
// 상품 - fm_goods
model Goods {
  id                      Int                @id @default(autoincrement())
  sellerId                Int
  seller                  Seller             @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  options                 GoodsOptions[]
  confirmation            GoodsConfirmation? // 상품 검수
  // 여기서부터는 퍼스트몰 컬럼과 동일한 컬럼
  goods_name              String // 상품명
  summary                 String // 간략 설명
  goods_status            GoodsStatus        @default(normal) // 상품 상태
  cancel_type             String             @default("0") // 청약철회 가능 여부, "0" or "1"
  contents                String?            @db.LongText // 상세 설명 PC 화면
  contents_mobile         String?            @db.LongText // 상세 설명 Mobile 화면
  shipping_policy         ShopOrGoods        @default(shop) // 배송 정책 선택
  goods_shipping_policy   LimitOrUnlimit     @default(unlimit) // 개별 배송비 선택
  unlimit_shipping_price  Int?               @db.UnsignedInt // 배송비
  limit_shipping_ea       Int?               @db.UnsignedTinyInt // 개별 배송 포장 단위
  limit_shipping_price    Int?               @db.UnsignedInt // 개별 배송 단위별 배송비
  limit_shipping_subprice Int?               @db.UnsignedTinyInt // 개별 배송 추가 배송비
  shipping_weight_policy  ShopOrGoods        @default(shop) // 해외 배송 중량 정책
  min_purchase_limit      LimitOrUnlimit     @default(unlimit) // 최소 구매 수량 사용 여부
  min_purchase_ea         Int?               @db.UnsignedMediumInt // 최소 구매 수량
  max_purchase_limit      LimitOrUnlimit     @default(unlimit) // 최대 구매 수량 사용 여부
  max_purchase_ea         Int?               @db.UnsignedMediumInt // 최대 구매 수량
  max_urchase_order_limit Int?               @db.UnsignedMediumInt // 최대 구매 수량 주문 횟수
  admin_memo              String?            @db.Text // 관리자 메모
  option_use              String             @default("0") // 옵션 사용 여부 "0" or "1"
  option_view_type        OptionViewType     @default(divide) // 필수옵션-분리/합체형 구분
  option_suboption_use    String             @default("0") // 추가 옵션 사용 여부 "0" or "1"
  member_input_use        String             @default("0") // 추가 구성 옵션 사용 여부 "0" or "1"
  image                   GoodsImages[] // 상품 이미지 - fm_goods_image
  goods_view              GoodsView          @default(look) // 노출
  regist_date             DateTime           @default(now()) // 상품등록일 (project-lc 에 판매자가 등록한 날짜)
  update_date             DateTime           @default(now()) @updatedAt // 수정일 (퍼스트몰에는 코멘트에 구매수량 이라고 되어있음, project-lc 에서 수정한 날짜)
  runout_policy           RunoutPolicy?      @default(unlimited) // 재고 정책
  ShippingGroup           ShippingGroup?     @relation(fields: [shippingGroupId], references: [id])
  shippingGroupId         Int?
  GoodsInfo               GoodsInfo?         @relation(fields: [goodsInfoId], references: [id])
  goodsInfoId             Int?               @unique

  @@index([sellerId], name: "sellerId")
}

model GoodsConfirmation {
  id                         Int                       @id @default(autoincrement())
  goodsId                    Int                       @unique
  status                     GoodsConfirmationStatuses @default(waiting) // ��수 상태
  firstmallGoodsConnectionId Int? // 퍼스트몰 상품 고유 ID (fm_goods.goods_seq)
  goods                      Goods                     @relation(fields: [goodsId], references: [id], onDelete: Cascade)
  rejectionReason            String?                   @db.Text // 반려사유 - 관리자가 입력

  @@index([firstmallGoodsConnectionId], name: "firstmallGoodsConnectionId")
}

model GoodsOptions {
  id             Int                   @id @default(autoincrement())
  goods          Goods                 @relation(fields: [goodsId], references: [id], onDelete: Cascade)
  goodsId        Int
  supply         GoodsOptionsSupplies?
  // 여기서부터는 퍼스트몰 컬럼과 동일한 컬럼
  default_option YesOrNo               @default(n) // 옵션 필수 여부
  option_type    String                @default("direct") // 기본값인듯? 설명도 direct
  option_title   String? // 옵션명 fm_goods_options.option_title
  option1        String? // 옵션값 fm_goods_options.option1
  option_code    String? // 옵션코드
  consumer_price Decimal               @db.Decimal(10, 2) // ��������비��가 (미할인가)
  price          Decimal               @db.Decimal(10, 2) // 판매가 (할인가)
  color          String?               @db.VarChar(10) // 컬러 hex값
  weight         Float? //옵션 개당 무게 (단위 kg)
  option_view    YesOrNo_UPPERCASE     @default(Y) // 옵션 노출 여부

  @@index([goodsId], name: "goodsId")
}

// 상품 옵션 재고 - fm_goods_suply
model GoodsOptionsSupplies {
  id             Int          @id @default(autoincrement())
  goodsOptionsId Int          @unique
  // 여기서부터는 퍼스트몰 컬럼과 동일한 컬럼
  stock          Int          @db.UnsignedInt // 재고
  badstock       Int?         @db.UnsignedInt // 불량재고
  safe_stock     Int?         @default(0) // 각 매장의 옵션별 안전 재고
  goodsOptions   GoodsOptions @relation(fields: [goodsOptionsId], references: [id], onDelete: Cascade)

  @@index([goodsOptionsId], name: "goodsOptionsId")
}

// 상품 사진 fm_goods_image
model GoodsImages {
  id         Int    @id @default(autoincrement())
  goods      Goods  @relation(fields: [goodsId], references: [id], onDelete: Cascade)
  goodsId    Int
  image      String
  cut_number Int
}

// 상품 공통 정보
model GoodsInfo {
  id         Int    @id @default(autoincrement())
  sellerId   Int
  info_name  String
  info_value String @db.LongText // 상품 공통 정보

  goods  Goods[]
  seller Seller  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model LoginHistory {
  id         Int      @id @default(autoincrement())
  seller     Seller?  @relation(fields: [sellerId], references: [id])
  sellerId   Int?
  method     String // 로그인 방식
  ip         String // 로그인 IP
  country    String? // 로그인 국가
  city       String? // 로그인 도시
  device     String // 로그인 기기
  ua         String // User-Agent 문자열
  createDate DateTime @default(now()) // 로그인 일시

  @@index([sellerId], name: "sellerId")
}

// 상품 검수 상태 정보
enum GoodsConfirmationStatuses {
  waiting // 대기
  confirmed // 승인
  rejected // 거절
}

// 상품 검수 상태 정보
enum BusinessRegistrationStatus {
  waiting // 대기
  confirmed // 승인
  rejected // 거절
}

// * 상품 - 상태
enum GoodsStatus {
  normal // 정상
  runout // 품절
  purchasing // 재고확보중
  unsold // 판매중지
}

// * 상품 - 노출
enum GoodsView {
  look // 노출
  notLook // 미노출
}

// * 상품 - 재고 정책 (재고판매)
enum RunoutPolicy {
  stock //재고
  ableStock //가용재고
  unlimited //무제한
}

// * 상품 - 배송 정책 선택
// * 상품 - 헤외 배송 중량 정책
enum ShopOrGoods {
  shop
  goods
}

// * 상품- 개별 배송비 선택
// * 상품 - 최소 구매 수량 사용 여부
// * 상품 - 최대 구매 수량 사용 여부
enum LimitOrUnlimit {
  unlimit
  limit
}

// * 상품 - 필수옵션-분리/합체형 구분
enum OptionViewType {
  divide
  join
}

enum YesOrNo {
  y
  n
}

enum YesOrNo_UPPERCASE {
  Y
  N
}

// ****************************
// 배송비 정책 테이블 - fm_shipping_grouping 참고
model ShippingGroup {
  id                      Int                @id @default(autoincrement())
  seller                  Seller             @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId                Int
  shippingSets            ShippingSet[]
  baseAddress             String // 기본주소
  detailAddress           String // 상세주소
  postalCode              String // 우편번호
  goods                   Goods[]
  // 이하 퍼스트몰 fm_shipping_grouping 과  동일한 컬럼
  shipping_group_name     String             @db.VarChar(255) // '배송그룹명',
  shipping_calcul_type    ShippingCalculType @default(bundle) // '배송비계산기준', free무료, bundle묶음, each개별 배송비 추가설정
  shipping_calcul_free_yn YesOrNo_UPPERCASE? @default(N) // '계산 무료화 여부',
  shipping_std_free_yn    YesOrNo_UPPERCASE? @default(N) // '기본배송비 무료화',
  shipping_add_free_yn    YesOrNo_UPPERCASE? @default(N) // '추가배송비 무료화',
}

// 배송비 계산 기준
enum ShippingCalculType {
  free //무료
  bundle // 묶음
  each // 개별
}

// ****************************
// 배송 설정 테이블 - fm_shipping_set 참고
model ShippingSet {
  id                  Int                @id @default(autoincrement())
  shippingOptions     ShippingOption[]
  shippingGroup       ShippingGroup      @relation(fields: [shipping_group_seq], references: [id], onDelete: Cascade)
  // 이하 퍼스트몰 fm_shipping_set 과 동일한 컬럼
  shipping_group_seq  Int
  shipping_set_code   ShippingSetCode    @default(delivery) // '배송설정 코드', delivery 택배/direct_delivery 직접배송/quick 퀵서비스/freight 화물배송/custom 직접입력/direct_store 매장수령
  shipping_set_name   String             @db.VarChar(50) // 배송설정 명',
  default_yn          YesOrNo_UPPERCASE? @default(N) // 대표 선택 여부 - 추후 배송가능 국가별 대표지정 현재안씀.',
  delivery_nation     DeliveryNation     @default(korea) // '배송가능국가',
  delivery_limit      LimitOrUnlimit     @default(unlimit) // 배송지역 제한 - unlimit - 전국(전세계) / limit - 지정지역(국가)',
  refund_shiping_cost Decimal?           @db.Decimal(11, 2) // '반품 배송비',
  swap_shiping_cost   Decimal?           @db.Decimal(11, 2) // '맞교환 배송비',
  prepay_info         PrepayInfo         @default(delivery) // 선불/착불 정보
  shiping_free_yn     YesOrNo_UPPERCASE  @default(N) //'무료배송시 반품왕복배송비',
}

// 착불/선불 정보
enum PrepayInfo {
  delivery
  postpaid
  all
}

// 배송설정 코드
enum ShippingSetCode {
  delivery // 택배
  direct_delivery // 직접배송
  quick // 퀵서비스
  freight // 화물배송
  direct_store // 매장수령
  custom // 직접입력
}

// 배송가능 국가
enum DeliveryNation {
  korea // 대한민국
  global // 해외
}

// 배송 방법 테이블 fm_shipping_option 참고
model ShippingOption {
  id                Int                @id @default(autoincrement())
  shippingCost      ShippingCost[]
  shippingSet       ShippingSet        @relation(fields: [shipping_set_seq], references: [id], onDelete: Cascade)
  // 이하 퍼스트몰 fm_shipping_option 과 동일한 컬럼
  shipping_set_seq  Int
  shipping_set_type ShippingSetType    @default(std) // 배송설정 타입 std - 기본 / add - 추가
  shipping_opt_type ShippingOptType    @default(free) //'배송방법 타입 free - 무료 / fixed - 고정 / amount - 금액 / cnt - 수량 / weight - 무게',
  default_yn        YesOrNo_UPPERCASE? @default(N) // 기본 옵션인지 여부
  section_st        Float? // 시작구간(무게, 금액, 수량)
  section_ed        Float? // 끝구간(무게, 금액, 수량)


}

// 배송설정 타입
enum ShippingSetType {
  std // 기본
  add // 추가
}

// 배��방법 타입
enum ShippingOptType {
  free // 무료
  fixed // 고정
  amount // 금액(구간입력)
  amount_rep // 금액(구간반복)
  cnt // 수량(구간입력)
  cnt_rep // 수량(구간반복)
  weight // 무게(구간입력)
  weight_rep // 무게(구간반복)
}

// 배송비 금액 테이블 fm_shipping_cost 참고,
// 배송지역 상세 부분 구현하지 못하여 배송비 금액테이블 부분에 배송지역 추가함
model ShippingCost {
  id                 Int            @id @default(autoincrement())
  shippingOption     ShippingOption @relation(fields: [shipping_opt_seq], references: [id], onDelete: Cascade)
  shipping_opt_seq   Int
  shipping_cost      Decimal?       @db.Decimal(11, 2) // 금액
  shipping_area_name String         @db.VarChar(255) // '지역명',
}

// 라이브 커머스 랭킹 테이블
model LiveCommerceRanking {
  id                 Int         @id @default(autoincrement())
  nickname           String      @default("비회원") // 메세지 작성자의 닉네임
  text               String      @db.LongText // 메세지 내용
  price              Int // 구매금액
  phoneCallEventFlag Boolean     @default(false) // 전화 이벤트 참여 여부 
  giftFlag           Boolean     @default(false) // 스트리머����� 선물하기 여부
  loginFlag          Boolean     @default(true) // 회원 | 비회원 구분 \
  broadcaster        Broadcaster @relation(fields: [broadcasterId], references: [userId])
  broadcasterId      String      @db.VarChar(20) // 스트리머의 아이디 
  createDate         DateTime    @default(now()) // 작성일자
}

model Broadcaster {
  id                  Int                   @id @default(autoincrement())
  liveCommerceRanking LiveCommerceRanking[]
  userId              String                @db.VarChar(20) // 유저 아이디
  userName            String                @db.VarChar(20) // 유저의 실명
  userNickname        String                @db.VarChar(20) // 유저의 활동명
  afreecaId           String? // 유저의 아프리카 아이디
  twitchId            String? // 유저의 트위치 아이디
  youtubeId           String? // 유저의 유튜브 아이디
  overlayUrl          String                @unique // 라이브커머스 오버레이 URL 
  createDate          DateTime              @default(now())
  deleteFlag          Boolean               @default(false) // 회원탈퇴 여부

  @@index(userId)
}
